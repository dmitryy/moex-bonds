{"version":3,"sources":["context/MoexBondsReducer.js","store/actions/ActionTypes.js","context/MoexBondsContext.js","common/secType.js","utils/mapper.js","api/moex.js","context/MoexBondsProvider.js","components/BondsTable/BondTableRow.js","components/BondsTable/BondTableHead.js","components/BondsTable/Columns.js","components/BondsTable/SortUtils.js","components/BondsTable/StyleUtils.js","components/BondsTable/BondsTable.js","components/Bonds/Bonds.js","common/months.js","components/Filter/Filter.js","components/PortfolioItem/PortfolioItem.js","components/Portfolio/Portfolio.js","components/Chart/Chart.js","components/ChartCumulative/ChartCumulative.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["handlers","state","action","initialBonds","payload","bonds","loading","boards","filter","portfolio","MoexBondsReducer","type","DEFAULT","MoexBondsContext","React","createContext","SecType","SecTypeList","name","convertArrayToObject","arr","columns","obj","forEach","col","index","mapResponseToBonds","securities","map","bond","value","expireDate","MATDATE","BUYBACKDATE","couponCount","calculateCouponCount","NEXTCOUPON","COUPONPERIOD","buyBackPrice","LOTVALUE","BUYBACKPRICE","returnValue","SHORTNAME","price","PREVPRICE","coupon","COUPONVALUE","couponPeriod","couponPercent","YIELDATPREVWAPRICE","couponDate","couponAccumulated","ACCRUEDINT","currency","FACEUNIT","board","BOARDID","isin","ISIN","months","calculateCouponMonths","SECTYPE","profitPercent","calculateBondAnnualProfit","console","log","couponDateStr","expireDateStr","period","Date","paysPerYear","Math","floor","Object","keys","length","getMonth","setDate","getDate","m","parseInt","round","currentDate","yearsCount","abs","returnProfit","moexBondsUrl","getBonds","a","axios","get","response","data","MoexBondsProvider","children","initialState","currencies","month","types","useReducer","dispatch","setLoading","getMoexBonds","getFilteredBonds","concat","includes","Provider","setFilter","setPortfolio","BondTableRow","props","row","TableRow","hover","TableCell","key","id","align","numeric","template","BondTableHead","classes","order","orderBy","onRequestSort","TableHead","headCell","padding","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","descendingComparator","b","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","BondsTable","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","rows","Fragment","TableContainer","Table","size","rowCount","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","slice","TablePagination","rowsPerPageOptions","component","count","onChangePage","newPage","onChangeRowsPerPage","target","Bonds","useContext","Link","href","modifiedPortfolio","portfolioItem","p","push","addBondToPortfolio","Filter","FormControl","InputLabel","Select","labelId","onChange","modifiedFilter","MenuItem","multiple","input","Input","renderValue","selected","t","findIndex","st","join","Checkbox","checked","indexOf","ListItemText","primary","PortfolioItem","changeCount","removeItem","TextField","parseFloat","calculateCost","Portfolio","changedPortfolio","item","total","calculateTotal","Chart","portfolioMonths","maxCouponValue","getCouponValue","monthIndex","getBarHeightString","percent","items","calculateTotalCoupon","coupons","max","style","ChartCumulative","payments","returns","sortedBonds","curDate","curMonth","d1","d2","getFullYear","monthDiff","Array","i","nextMonths","fromCurrent","monthDelta","j","inMonths","paymentsFiltered","reduce","acc","val","num","portfolioTotal","returnTotal","profit","drawReturns","splice","annualProfit","r","ret","Home","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05ddcc6f.chunk.js","sourcesContent":["import { \n    GET_ALL_BONDS, \n    SET_LOADING, \n    GET_ALL_BOARDS, \n    SET_FILTERED_BONDS, \n    SET_FILTER, \n    SET_PORTFOLIO\n} from \"../store/actions/ActionTypes\";\n\nconst handlers = {\n    [GET_ALL_BONDS]: (state, action) => ({ ...state, initialBonds: action.payload.initialBonds, \n        bonds: action.payload.bonds, loading: false }),\n    [GET_ALL_BOARDS]: (state, action) => ({ ...state, boards: action.payload, loading: false }),\n    [SET_LOADING]: (state) => ({ ...state, loading: true }),\n    [SET_FILTER]: (state, action) => ({ ...state, filter: action.payload.filter, \n        bonds: action.payload.bonds }),\n    [SET_FILTERED_BONDS]: (state, action) => ({ ...state, bonds: action.payload }),\n    [SET_PORTFOLIO]: (state, action) => ({ ...state, portfolio: action.payload }),\n    DEFAULT: state => state\n}\n\nexport const MoexBondsReducer = (state, action) => {\n    const handler = handlers[action.type] || handlers.DEFAULT;\n    return handler(state, action);\n}","export const GET_ALL_BONDS = 'GET_ALL_BONDS';\nexport const GET_ALL_BOARDS = 'GET_ALL_BOARDS';\n\nexport const SET_LOADING = 'SET_LOADING';\n\nexport const SET_FILTER = 'SET_FILTER';\nexport const SET_FILTERED_BONDS = 'SET_FILTERED_BONDS';\nexport const SET_PORTFOLIO = 'SET_PORTFOLIO';\n","import React from 'react';\n\nexport const MoexBondsContext = React.createContext();\n","// 1 - Акция обыкновенная \r\n// 2 - Акция привилегированная \r\n// 3 - Государственные облигации \r\n// 4 - Региональные облигации \r\n// 5 - Облигации центральных банков \r\n// 6 - Корпоративные облигации \r\n// 7 - Облигации МФО \r\n// 8 - Биржевые облигации \r\n// 9 - Паи открытых ПИФов \r\n// A - Паи интервальных ПИФов \r\n// B - Паи закрытых ПИФов \r\n// C - Муниципальные облигации \r\n// D - Депозитарные расписки \r\n// E - Бумаги иностранных инвестиционных фондов (ETF) \r\n// F - Ипотечный сертификат \r\n// G - Корзина бумаг \r\n// H - Доп. идентификатор списка \r\n// I - ETC (товарные инструменты)\r\n//\r\n// https://www.moex.com/s1467?utm_source=www.moex.com&utm_term=sectype\r\n\r\nexport const SecType = {\r\n    /**\r\n     * Акция обыкновенная\r\n     */\r\n    Stock: '1',\r\n    /**\r\n     * Акция привилегированная\r\n     */\r\n    StockPriv: '2',\r\n    /**\r\n     * Государственные облигации \r\n     */\r\n    BondGov: '3',\r\n    /**\r\n     * Региональные облигации \r\n     */\r\n    BondReg: '4',\r\n    /**\r\n     * Облигации центральных банков \r\n     */\r\n    BondCB: '5',\r\n    /**\r\n     * Корпоративные облигации \r\n     */\r\n    BondCorp: '6',\r\n    /**\r\n     * Облигации МФО \r\n     */\r\n    BondMfo: '7',\r\n    /**\r\n     * Биржевые облигации \r\n     */\r\n    BondExchange: '8',\r\n    /**\r\n     * Муниципальные облигации \r\n     */\r\n    BondMunicipal: 'C'\r\n};\r\n\r\nexport const SecTypeList = [\r\n    //{ type: SecType.Stock, name: 'Акция обыкновенная' },\r\n    //{ type: SecType.StockPriv, name: 'Акция привилегированная' },\r\n    { type: SecType.BondGov, name: 'Государственные облигации ' },\r\n    { type: SecType.BondReg, name: 'Региональные облигации ' },\r\n    { type: SecType.BondCB, name: 'Облигации центральных банков ' },\r\n    { type: SecType.BondCorp, name: 'Корпоративные облигации ' },\r\n    { type: SecType.BondMfo, name: 'Облигации МФО' },\r\n    { type: SecType.BondExchange, name: 'Биржевые облигации' },\r\n    { type: SecType.BondMunicipal, name: 'Муниципальные облигации' },\r\n];","/**\n * \n * @param {*} arr \n * @param {*} columns \n */\nconst convertArrayToObject = (arr, columns) => {\n    const obj = {};\n    \n    columns.forEach((col, index) => {\n        obj[col] = arr[index]\n    });\n\n    return obj;    \n}\n\n/**\n * \n * @param {*} boards \n * @param {*} columns \n */\nexport const mapResponseToBoards = (boards, columns) => {\n    return boards.map(board => {\n        return convertArrayToObject(board, columns)\n    });\n}\n\n/**\n * \n * @param {*} securities \n * @param {*} columns \n */\nexport const mapResponseToBonds = (securities, columns) => {\n    return securities.map(bond => {\n        \n        const value = convertArrayToObject(bond, columns);\n\n        let expireDate = value.MATDATE != '0000-00-00' ? value.MATDATE : value.BUYBACKDATE;\n        let couponCount = calculateCouponCount(value.NEXTCOUPON, value.MATDATE != '0000-00-00' ? value.MATDATE : value.BUYBACKDATE, value.COUPONPERIOD);\n        let buyBackPrice = value.MATDATE != '0000-00-00' ? value.LOTVALUE : value.BUYBACKPRICE; // BUYBACKPRICE\n        \n        const returnValue = {\n            name: value.SHORTNAME,\n            price: value.PREVPRICE,\n            expireDate: expireDate,\n            coupon: value.COUPONVALUE,\n            couponPeriod: value.COUPONPERIOD,\n            couponPercent: value.YIELDATPREVWAPRICE, // value.COUPONPERCENT,\n            couponDate: value.NEXTCOUPON,\n            couponAccumulated: value.ACCRUEDINT, // НКД\n            couponCount: couponCount,\n            currency: value.FACEUNIT, // value.CURRENCYID,\n            value: buyBackPrice,\n            board: value.BOARDID,\n            isin: value.ISIN,\n\n            // months that coupon paid, starting from 1 till 12\n            months: calculateCouponMonths(value.NEXTCOUPON, value.MATDATE, value.COUPONPERIOD),\n            // expire days\n            //expireDays: calculateExpireDays(value.MATDATE)\n            type: value.SECTYPE\n        };\n\n        returnValue.profitPercent = calculateBondAnnualProfit(returnValue);\n\n        if (bond[2] === 'ФинАвиа 01') {\n            console.log(value)\n            console.log(returnValue)\n        }\n        // if (returnValue.isin == 'RU000A0JXE06') {\n        //     console.log('RU000A0JXE06', returnValue);\n        // }\n        if (bond[2] === 'RUS-28') {\n            console.log(value)\n            console.log(returnValue)\n        }\n\n        return returnValue;\n    });\n}\n\n/**\n * Returns array of month with coupon paind, starting from 1 till 12\n * @param {*} couponDateStr \n * @param {*} expireDateStr \n * @param {*} period \n */\nconst calculateCouponMonths = (couponDateStr, expireDateStr, period) => {\n    let couponDate = new Date(couponDateStr);\n    let expireDate = new Date(expireDateStr);\n    let months = {};\n    let paysPerYear = Math.floor(368 / period);\n\n    while (couponDate <= expireDate && Object.keys(months).length < paysPerYear) {\n        months[couponDate.getMonth() + 1] = couponDate;\n        couponDate.setDate(couponDate.getDate() + period);\n    }\n\n    return Object.keys(months).map(m => parseInt(m));\n}\n\nconst calculateExpireDays = (expireDateStr) => {\n    let expireDate = new Date(expireDateStr);\n    let currentDate = new Date();\n    let days = Math.round((expireDate - currentDate) / (1000 * 3600 * 24));\n    return days;\n}\n\nconst calculateCouponCount = (couponDateStr, expireDateStr, period) => {\n    let couponDate = new Date(couponDateStr);\n    let expireDate = new Date(expireDateStr);\n    return Math.round((expireDate - couponDate) / (1000 * 3600 * 24) / period + 1);\n}\n\nconst calculateBondAnnualProfit = (bond) => {\n    const currentDate = new Date();\n    const expireDate = new Date(bond.expireDate);\n    const millisecondsInYear = 31556952000;\n    let yearsCount = Math.abs(expireDate - currentDate) / millisecondsInYear\n    let price = bond.value * bond.price / 100;\n    let returnProfit = bond.couponCount * bond.coupon + bond.value - bond.couponAccumulated;\n    let annualProfit =  Math.round((Math.log(returnProfit / price) / yearsCount * 100) * 100) / 100;\n    return annualProfit;\n}","import axios from 'axios';\nimport { mapResponseToBoards, mapResponseToBonds } from '../utils/mapper';\n\n/**\n * Moex boards documentation: http://ftp.moex.com/pub/ClientsAPI/ASTS/docs/ASTS_Markets_and_Boards.pdf\n */\nconst moexBaseUrl = 'https://iss.moex.com/iss';\nconst moexBoardsUrl = `${moexBaseUrl}/index.json`;\nconst moexBondsUrl = `${moexBaseUrl}/engines/stock/markets/bonds/securities.json`;\n\n/**\n * \n */\nexport const getBoards = async () => {\n    const response = await axios.get(moexBoardsUrl);\n    const columns = response.data.boards.columns;\n    const boards = response.data.boards.data;\n    return mapResponseToBoards(boards, columns);\n}\n\n/**\n * \n */\nexport const getBonds = async () => {\n    const response = await axios.get(moexBondsUrl);\n    const columns = response.data.securities.columns;\n    const securities =  response.data.securities.data;\n    return mapResponseToBonds(securities, columns);\n}","import React, { useReducer } from 'react'\nimport { MoexBondsReducer } from './MoexBondsReducer'\nimport { GET_ALL_BOARDS, GET_ALL_BONDS, SET_LOADING, SET_FILTERED_BONDS, SET_FILTER, SET_PORTFOLIO } from '../store/actions/ActionTypes';\nimport { MoexBondsContext } from './MoexBondsContext';\nimport { SecType } from '../common/secType';\nimport { \n    getBonds as getMoexBonds, \n    getBoards as getMoexBoards\n} from '../api/moex';\n\nexport const MoexBondsProvider = ({children}) => {\n\n    const initialState = {\n        boards: [],\n        bonds: [],\n        filter: {\n            boards: ['TQOD', 'TQOB', 'TQCB'], // 'TQOB', 'TQCB'\n            currencies: ['SUR'], // 'SUR', 'USD'\n            month: null,\n            types: [ SecType.BondGov ]\n        },\n        initialBonds: [],\n        loading: false,\n        portfolio: []\n    }\n\n    const [state, dispatch] = useReducer(MoexBondsReducer, initialState);\n\n    /**\n     * get moex boards\n     */\n    const getBoards = async () => {\n        setLoading();\n\n        const boards = await getMoexBoards();\n\n        dispatch({\n            type: GET_ALL_BOARDS,\n            payload: boards\n        });\n    }\n\n    /**\n     * get moex bonds\n     */\n    const getBonds = async () => {\n        setLoading();\n        \n        const bonds = await getMoexBonds();\n\n        dispatch({\n            type: GET_ALL_BONDS,\n            payload: {\n                initialBonds: bonds,\n                bonds: getFilteredBonds(bonds, state.filter)\n            }\n        });\n    }\n\n    /**\n     * \n     * @param {object} filter - bonds filter\n     */\n    const setFilter = (filter) => {\n        dispatch({\n            type: SET_FILTER,\n            payload: {\n                filter: filter,\n                bonds: getFilteredBonds(state.initialBonds, filter)\n            }\n        });\n    }\n\n    /**\n     * get bonds according to filter set\n     */\n    const getFilteredBonds = (bonds, filter) => {\n        const boards = filter.boards;\n        const currencies = filter.currencies;\n        const month = filter.month;\n        const types = filter.types;\n        const filteredBonds = bonds.concat().filter(bond => boards.includes(bond.board)\n            && currencies.includes(bond.currency)\n            && types.includes(bond.type)\n            && (!month || bond.months.includes(month))\n            && bond.price != null\n            && bond.coupon > 0\n        );\n        // console.log(bonds);\n        // console.log(bonds[1810])\n        //console.log(filteredBonds)\n        return filteredBonds;\n    }\n\n    /**\n     * set loading\n     */\n    const setLoading = () => {\n        dispatch({\n            type: SET_LOADING\n        })\n    }\n\n    /**\n     * \n     * @param {object} portfolio \n     */\n    const setPortfolio = (portfolio) => {\n        dispatch({\n            type: SET_PORTFOLIO,\n            payload: portfolio\n        })\n    }\n\n    const { bonds, filter, portfolio } = state;\n\n    return (\n        <MoexBondsContext.Provider value={{\n            bonds, filter, portfolio,\n            getBonds, setFilter, setPortfolio\n        }}>\n            {children}\n        </MoexBondsContext.Provider>\n    )\n}\n","import React from 'react'\nimport { TableCell, TableRow } from '@material-ui/core';\n\nexport const BondTableRow = (props) => {\n    const { row, columns } = props;\n\n    return (\n        <TableRow hover>\n            {columns.map(col => \n                <TableCell \n                    key={col.id}    \n                    align={col.numeric ? 'right' : 'left'}\n                >\n                    {col.template && typeof(col.template) == 'function' ? col.template(row) : row[col.id]}\n                </TableCell>\n            )}\n        </TableRow>\n    )\n}\n","import React from 'react'\nimport { TableHead, TableRow, TableCell, TableSortLabel } from '@material-ui/core'\n\nexport const BondTableHead = (props) => {\n    const { classes, columns, order, orderBy, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n      onRequestSort(event, property);\n    };    \n    return (\n        <TableHead>\n            <TableRow>\n                {columns.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    )\n}\n","export const columns = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Название' },\n    { id: 'value', numeric: true, disablePadding: true, label: 'Номинал' },\n    { id: 'price', numeric: true, disablePadding: false, label: 'Тек.Цена' },\n    { id: 'expireDate', numeric: false, disablePadding: false, label: 'Погашение' },\n    { id: 'couponPeriod', numeric: true, disablePadding: true, label: 'Периодичность'},\n    { id: 'coupon', numeric: true, disablePadding: false, label: 'Купон' },\n    { id: 'couponPercent', numeric: true, disablePadding: false, label: 'Доходность' }\n];","export function descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n}\n  \nexport function getComparator(order, orderBy) {\n    return order === 'desc'\n      ? (a, b) => descendingComparator(a, b, orderBy)\n      : (a, b) => -descendingComparator(a, b, orderBy);\n}\n  \nexport function stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = comparator(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}","import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n    },\n    paper: {\n      width: '100%',\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      height: 1,\n      margin: -1,\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      top: 20,\n      width: 1,\n    },\n}));","import React from 'react'\nimport { Table, TableContainer, TableBody, Paper, TablePagination } from '@material-ui/core'\nimport { BondTableRow } from './BondTableRow'\nimport { BondTableHead } from './BondTableHead'\nimport { columns } from './Columns';\nimport { getComparator, stableSort } from './SortUtils';\nimport { useStyles } from './StyleUtils';\n\nexport const BondsTable = (props) => {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const rows = props.bonds;\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    \n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n    \n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    \n    return (\n        <React.Fragment>\n            <TableContainer>\n                <Table size='small'>\n                    <BondTableHead\n                        classes={classes}\n                        columns={props.columns || columns}\n                        order={order}\n                        orderBy={orderBy}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map(row => {\n                                return <BondTableRow\n                                    key={row.name}\n                                    row={row}\n                                    columns={props.columns || columns}\n                                />\n                            })\n                        }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 15, 20, 25, 30]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </React.Fragment>\n    )\n}\n","import React, { useContext } from 'react'\nimport { MoexBondsContext } from '../../context/MoexBondsContext'\nimport { Link } from '@material-ui/core'\nimport { BondsTable } from '../BondsTable/BondsTable'\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport './Bonds.scss';\n\nexport const Bonds = () => {\n    \n    const { bonds, portfolio, setPortfolio } = useContext(MoexBondsContext);\n\n    const addBondToPortfolio = (bond) => {\n        const modifiedPortfolio = portfolio.concat();\n        const portfolioItem = modifiedPortfolio.filter(p => p.bond.isin == bond.isin);\n\n        if (portfolioItem.length) {\n            portfolioItem[0].count++;\n        } else {\n            modifiedPortfolio.push({ count: 1, bond: bond });\n        }\n        \n        setPortfolio(modifiedPortfolio);\n    }\n\n    // TODO: убрать валюту, перенести в фильтры\n\n    // TODO: объединить столбцы \"погашение\", \"выплаты\", \"купонов\", \"период\" в 1 компонент, \n    //       который графически показывает выплаты в виде ячеек с буквой месяца, \n    //       и шкалой от 1 до макс. купонов\n\n    // TODO: сделать стили более сжатыми, чтобы помещалось больше колонок и строк\n\n    // TODO: добавить ссылку рядом с именем на https://www.moex.com/ru/issue.aspx?board=TQOD&code=XS0088543193\n\n    // TODO: индикатор, что облигация уже в портфеле\n\n    // TODO: поиск по имени и isin\n\n    return (\n        <div>\n            <BondsTable bonds={bonds} columns={[\n                { id: 'name', numeric: false, disablePadding: false, label: 'Название',\n                    template: (bond) => (\n                        <Link\n                            target='_blank'\n                            href={`https://www.moex.com/ru/issue.aspx?board=${bond.board}&code=${bond.isin}`}\n                        >\n                            {bond.name}\n                        </Link> \n                    )\n                },\n                //{ id: 'currency', numeric: true, disablePadding: true, label: 'Валюта' },\n                { id: 'value', numeric: true, disablePadding: true, label: 'Номинал' },\n                { id: 'expireDate', numeric: true, disablePadding: false, label: 'Погашение' },\n                //{ id: 'months', numeric: true, disablePadding: false, label: 'Выплаты' },\n                { id: 'couponCount', numeric: true, disablePadding: false, label: 'Купонов' },\n                { id: 'couponPeriod', numeric: true, disablePadding: false, label: 'Период' },\n                { id: 'coupon', numeric: true, disablePadding: false, label: 'Купон' },\n                { id: 'couponAccumulated', numeric: true, disablePadding: false, label: 'НКД' },\n                { id: 'price', numeric: true, disablePadding: false, label: 'Тек.Цена' },                \n                { id: 'couponPercent', numeric: true, disablePadding: false, label: 'Доходность (Бирж)' },\n                { id: 'profitPercent', numeric: true, disablePadding: false, label: 'Доходность (Расч)' },\n                { id: 'isin', numeric: false, disablePadding: false, \n                    template: (bond) => (\n                        <Link\n                            className='add-link' \n                            onClick={() => addBondToPortfolio(bond)}\n                        >\n                            <AddCircleIcon/>\n                        </Link>\n                    )\n                }\n            ]} />\n        </div>\n    )\n}\n","export const months = [\n    'Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'\n];","import React, { useContext } from 'react'\nimport { Button, Select, FormControl, InputLabel, MenuItem, Input, Checkbox, ListItemText } from '@material-ui/core'\nimport { MoexBondsContext } from '../../context/MoexBondsContext';\nimport { months } from '../../common/months';\nimport { SecTypeList } from '../../common/secType';\nimport './Filter.scss';\n\nexport const Filter = () => {\n\n    const { filter, setFilter } = useContext(MoexBondsContext);\n    \n    const clearFilter = () => {\n        const modifiedFilter = { ...filter };\n        modifiedFilter.month = null;\n        setFilter(modifiedFilter);\n    }\n\n    const changeMonth = (event) => {\n        const month = event.target.value;\n        const modifiedFilter = { ...filter };\n        modifiedFilter.month = month;\n        setFilter(modifiedFilter);\n    }\n\n    const changeType = (event) => {\n        const types = event.target.value;\n        const modifiedFilter = { ...filter };\n        modifiedFilter.types = types;\n        setFilter(modifiedFilter);\n    }\n\n    // TODO: добавить валюты\n\n    // TODO: сделать фильтр по экспирации в виде слайдера\n\n    // TODO: сделать фильтр по доходности в виде слайдера\n\n    return (\n        <div className=\"filter\">\n            <FormControl className='select-month'>\n                <InputLabel id='filter-month'>Месяц выплат</InputLabel>\n                <Select\n                    labelId='filter-month'\n                    value={filter.month || 0}\n                    onChange={changeMonth}\n                >\n                    <MenuItem value={0}>Все</MenuItem>\n                    {months.map((month, index) => (\n                        <MenuItem\n                            value={index + 1}\n                            key={index + 1}\n                        >\n                            {month}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n\n            <FormControl>\n                <InputLabel id='filter-type'>Тип</InputLabel>\n                <Select multiple\n                    labelId='filter-type'\n                    value={filter.types}\n                    onChange={changeType}\n                    input={<Input />}\n                    renderValue={(selected) => {\n                        return selected.map(t => {\n                            let index = SecTypeList.findIndex(st => st.type == t);\n                            if (index != -1) {\n                                return SecTypeList[index].name;\n                            }\n                        }).join(',')\n                    }}\n                >\n                    {SecTypeList.map((t) => (\n                        <MenuItem key={t.type} value={t.type}>\n                            <Checkbox checked={filter.types.indexOf(t.type) > -1} />\n                            <ListItemText primary={t.name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n","import React from 'react'\nimport { TextField, Link } from '@material-ui/core';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport './PortfolioItem.scss';\n\nexport const PortfolioItem = ({ bond, count, changeCount, removeItem }) => {\n\n    const calculateCost = (bond, count) => {\n        const value = parseFloat(bond.value);\n        const price = parseFloat(bond.price);\n        const couponAccumulated = parseFloat(bond.couponAccumulated);\n        return Math.round(value * price * count / 100) + couponAccumulated * count;\n    }\n\n    return (\n        <div className=\"bond\">\n            <div className=\"name\">\n                <Link\n                    className='remove-item' \n                    onClick={() => removeItem(bond)}>\n                    <RemoveCircleOutlineIcon />\n                </Link>\n                {bond.name} ({bond.expireDate})\n            </div>\n            <div className=\"coupon\">\n                {bond.couponPercent}%\n            </div>\n            <div className=\"count\">\n                <TextField\n                    type=\"number\"\n                    value={count}\n                    onChange={(event) => changeCount(event, bond)}\n                />\n            </div>\n            <div className=\"cost\">\n                {calculateCost(bond, count)} р.\n            </div>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { MoexBondsContext } from '../../context/MoexBondsContext';\nimport { PortfolioItem } from '../PortfolioItem/PortfolioItem';\nimport './Portfolio.scss';\n\nexport const Portfolio = (props) => {\n    const { portfolio, setPortfolio } = useContext(MoexBondsContext);\n\n    const changeCount = (event, bond) => {\n        const changedPortfolio = portfolio.concat();\n        const portfolioBond = changedPortfolio.filter(p => p.bond.isin == bond.isin)[0];\n        portfolioBond.count = event.target.value;\n        setPortfolio(changedPortfolio);\n    }\n\n    const removeItem = (bond) => {\n        const changedPortfolio = portfolio.concat().filter(p => p.bond.isin != bond.isin);\n        setPortfolio(changedPortfolio);\n    }\n\n    const calculateCost = (bond, count) => {\n        const value = parseFloat(bond.value);\n        const price = parseFloat(bond.price);\n        const couponAccumulated = parseFloat(bond.couponAccumulated);\n        return Math.round(value * price * count / 100) + couponAccumulated * count;\n    }\n\n    const calculateTotal = () => {\n        let total = 0;\n        portfolio.map(p => total += calculateCost(p.bond, p.count));\n        return Math.round(total * 100) / 100;\n    }\n\n    // TODO: удалить из портфеля\n    \n    // TODO: более компактный стиль\n\n    // TODO: отображать фоновым баром процент от общего портфеля\n\n    // TODO: при клике или наведении на бар, подсвечивать облигации в этом баре\n\n    // TODO: сделать возможность поиска при клике\n\n    return (\n        <div className=\"portfolio\">\n            <h2>Портфель</h2>\n\n            {!!portfolio.length \n                && <div className=\"list\">\n                    {portfolio.map(item => (\n                        <PortfolioItem \n                            key={item.bond.isin} \n                            bond={item.bond} \n                            count={item.count} \n                            changeCount={changeCount}\n                            removeItem={removeItem}\n                        />\n                    ))}\n                    <div className=\"total\">\n                        {calculateTotal()} р.\n                    </div>\n                </div>\n            }\n\n            {!portfolio.length \n                && <p className=\"empty\">Здесь пока пусто</p>\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport { useContext } from 'react';\nimport { MoexBondsContext } from '../../context/MoexBondsContext';\nimport { months } from '../../common/months';\nimport './Chart.scss';\n\nexport const Chart = () => {\n    const { portfolio } = useContext(MoexBondsContext);\n    const portfolioMonths = {};\n    let maxCouponValue = 0;\n    let maxCouponCount = 0;\n\n    const calculateTotalCoupon = (items) => {\n        let total = 0;\n        items.map(item => {\n            total += item.count * parseFloat(item.bond.coupon);\n        });\n        return Math.round(total);\n    }\n\n    const getCouponValue = (monthIndex) => {\n        return portfolioMonths[monthIndex] ? portfolioMonths[monthIndex].coupon : 0;\n    }\n\n    const getBarHeightString = (monthIndex) => {\n        const coupon = getCouponValue(monthIndex);\n        let percent = coupon * 100 / maxCouponValue;\n        if (percent < 8) percent = 8;\n        return percent + '%';\n    }\n\n    const getBarOpacityString = (monthIndex) => {\n        const counts = getCouponCountByMonth(monthIndex);\n        const min = Math.min(...counts);\n        let opacity = min / maxCouponCount * 0.5 + 0.5;\n        // TODO: прозрачность бара в зависимости от экспирации\n        //       это работает не правильно, нужно учитывать дни до экспирации, а не кол-во купонов\n        return `${opacity} `;\n    }\n\n    const getCouponCountByMonth = (monthIndex) => {\n        return portfolioMonths[monthIndex] \n            ? portfolioMonths[monthIndex].items.map(i => i.bond.couponCount) \n            : [];\n    }\n\n    portfolio.map(item => {\n        item.bond.months.map(month => {\n            if (!portfolioMonths[month]) {\n                portfolioMonths[month] = {\n                    items: [],\n                    coupon: 0\n                };\n            }\n            portfolioMonths[month].items.push(item);\n            portfolioMonths[month].coupon = calculateTotalCoupon(portfolioMonths[month].items)\n        })\n    });\n\n    let keys = Object.keys(portfolioMonths);\n    let coupons = keys.map(key => portfolioMonths[key].coupon);\n    // let counts = keys.map(key => {\n    //     let c = getCouponCountByMonth(key)\n    //     return Math.min(...c); // судим о сроке погашения по минимальному в месяце\n    // });\n    maxCouponValue = Math.max(...coupons);\n    //maxCouponCount = Math.max(...counts);\n\n    // TODO: возврат средств от момента вложения до последнего погашения\n\n    return (\n        <div className=\"chart-container\">\n            <h2>Выплаты</h2>\n            <div className=\"chart\">\n                {months.map((month, index) => (\n                    <div\n                        key={month} \n                        className=\"month\" \n                        style={{ \n                            height: getBarHeightString(index + 1),\n                        //opacity: getBarOpacityString(index + 1)\n                        }}\n                    >\n                        <div className=\"price\">{getCouponValue(index + 1)}р</div>\n                        <div className=\"label\">{month}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n","import React, { useContext } from 'react'\nimport { MoexBondsContext } from '../../context/MoexBondsContext';\nimport './ChartCumulative.scss';\n\nexport const ChartCumulative = () => {\n    \n    const { portfolio } = useContext(MoexBondsContext);\n\n    const monthDiff = (d1, d2) => {\n        let months;\n        months = (d2.getFullYear() - d1.getFullYear()) * 12;\n        months -= d1.getMonth();\n        months += d2.getMonth();\n        return months <= 0 ? 0 : months;\n    }\n\n    const arraySum = (arr) => {\n        return arr.length ? Math.round(arr.reduce((acc, val) => acc + val) * 100) / 100 : 0;\n    }\n\n    const getHeightString = (ret) => {\n        const max = drawReturns[drawReturns.length - 1];\n        const percent = ret * 100 / max;\n        return percent + '%';\n    }\n\n    const calculateCost = (bond, count) => {\n        const value = parseFloat(bond.value);\n        const price = parseFloat(bond.price);\n        const couponAccumulated = parseFloat(bond.couponAccumulated);\n        return Math.round(value * price * count / 100) + couponAccumulated * count;\n    }\n\n    const calculateTotal = () => {\n        let total = 0;\n        portfolio.map(p => total += calculateCost(p.bond, p.count));\n        return Math.round(total * 100) / 100;\n    }\n\n    const payments = [];\n    let returns = [];\n    const sortedBonds = portfolio\n        .map(p => { return { ...p.bond, count: p.count } })\n        .sort((a, b) => a.expireDate < b.expireDate ? -1 : 1);\n\n    if (sortedBonds.length) {\n        const curDate = new Date();\n        const curMonth = curDate.getMonth() + 1; // starting from 1..12\n        const lastDate = new Date(sortedBonds[sortedBonds.length - 1].expireDate);\n        const months = monthDiff(curDate, lastDate);\n        returns = new Array(months + 1);\n\n        for (let i = 0; i < sortedBonds.length; i++) {\n            const bond = sortedBonds[i];\n            let nextMonths = bond.months.filter(m => m > curMonth);\n            let monthIndex = nextMonths.length ? bond.months.indexOf(nextMonths[0]) : 0;\n            let month = 0;\n            let fromCurrent = bond.months[monthIndex] - curMonth;\n            const monthDelta = bond.months.length > 1 ? bond.months[1] - bond.months[0] : 0;\n\n            for (let j = 0; j < bond.couponCount; j++) {\n\n                month = bond.months[monthIndex];\n                \n                payments.push({ \n                    bond: bond,\n                    month: month,\n                    inMonths: fromCurrent,\n                    type: 'coupon', \n                    value: bond.coupon * bond.count\n                });\n\n                monthIndex++;\n                \n                if (monthIndex >= bond.months.length) {\n                    monthIndex = 0;\n                }\n\n                if (j == bond.couponCount - 1) {\n                    payments.push({ \n                        bond: bond, \n                        month: month, \n                        inMonths: fromCurrent,\n                        type: 'expiration', \n                        value: bond.value * bond.count\n                    });\n                }\n\n                fromCurrent += monthDelta;\n            }\n        }\n        \n        payments.sort((a, b) => a.inMonths < b.inMonths ? -1 : 1);\n\n        for (let m = 0; m < returns.length; m++) {\n            const paymentsFiltered = payments.filter(p => p.inMonths < m + 1);\n            returns[m] = arraySum(paymentsFiltered.map(p => p.value));\n        }\n    }\n\n    const round = (num) => {\n        return Math.round(num * 100) / 100;\n    }\n\n    const portfolioTotal = calculateTotal();\n    const returnTotal = returns[returns.length - 1] || 0;\n    const profit = round(returnTotal - portfolioTotal);\n    //const profitPercent = profit > 0 ? round((returnTotal / portfolioTotal) * 100) : 0;\n    const drawLimit = 100;\n    const drawReturns = returns.length > drawLimit ? returns.concat().splice(returns.length - drawLimit) : returns;\n    const yearsCount = round(returns.length/12);\n    const annualProfit = portfolioTotal > 0 ? round(Math.log(returnTotal / portfolioTotal) / yearsCount * 100) : 0;\n\n    // TODO: учитывать номинальную стоимость купона при возврате средств\n    // TODO: refactor code and move some function to utils\n    \n    return (\n        <div className='chart-cumulative-container'>\n            <h2>Возврат</h2>\n            <p>\n                Через {returns.length} месяцев возврат средств составит {returnTotal}р.<br/>\n                Прибыль через <b>{yearsCount}</b> лет составит {profit}р. или <b>{annualProfit}%</b> годовых.\n            </p>        \n            <div className='chart-cumulative'>\n                {drawReturns.map((r, index) => \n                    <div\n                        key={index}\n                        className='chart-cumulative-bar'\n                        style={{ height: getHeightString(r) }}\n                    >\n                        <div className='return'>{r}</div>\n                        <div className='month'>{index + 1}</div>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n","import React, { useContext, useEffect } from 'react';\nimport { MoexBondsContext } from '../context/MoexBondsContext';\nimport { Bonds } from '../components/Bonds/Bonds';\nimport { Filter } from '../components/Filter/Filter';\nimport { Portfolio } from '../components/Portfolio/Portfolio';\nimport { Chart } from '../components/Chart/Chart';\nimport './Home.scss';\nimport { ChartCumulative } from '../components/ChartCumulative/ChartCumulative';\n\nexport const Home = () => {\n\n    const { getBonds } = useContext(MoexBondsContext);\n\n    useEffect(() => {\n        getBonds();\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"portfolio-chart\">\n                <Chart />\n            </div>\n            <div className=\"returns-chart\">\n                <ChartCumulative />\n            </div>\n            <div className=\"bonds-filter\">\n                <Filter />\n            </div>\n            <div className=\"bonds-list\">\n                <Bonds />\n            </div>\n            <div className=\"portfolio-list\">\n                <Portfolio />\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.scss';\nimport { MoexBondsProvider } from './context/MoexBondsProvider';\nimport { Home } from './pages/Home';\n//import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n// const theme = createMuiTheme({\n//   palette: {\n//     type: 'dark',\n//   },\n// });\n\nfunction App() {\n  return (\n    <MoexBondsProvider>\n      {/* <MuiThemeProvider theme={theme}> */}\n       <Home />\n      {/* </MuiThemeProvider> */}\n    </MoexBondsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}